* klin - functionality for my science writing workflow
** misc notes

TODO: 
- make a minor mode enabled in .bib files that has the functionality i need

TODO (originally): 
- make buffer-local keys in .bib file to trigger the various functions
- use the widget-library: show the keybindings in an attached small help buffer


#+BEGIN_SRC emacs-lisp
;; TODO:
;; I am in an org file and want to cite something, that is not in crossref
;; It needs a bibtex entry, to create that, I call
;; (org-ref-bibtex-new-entry/bibtex-Book-and-exit)

;; some useful stuff i figured out how to do:

;; get the entry's text from the entry's key
;; (org-ref-get-bibtex-entry "elb05")

;; get the full file name of the book from search
;; (nth 0 (split-string (shell-command-to-string "find ~/Dropbox -name \"*elberfel*\"") "\n"))

;; (let* ((results )
;;            (bibfile (cdr results))
;;            entry))

;; (car (org-ref-get-bibtex-key-and-file key))
;;
;; (let* ((results (org-ref-get-bibtex-key-and-file key))
;;        (bibfile (cdr results))
;;        entry))
;;
;; (let* ((results (org-ref-get-bibtex-key-and-file key))
;;        (bibfile (cdr results))
;;        entry))
;;
;;     (with-temp-buffer
;;       (insert-file-contents file)
;;       (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
;;       (bibtex-search-entry key nil 0)
;;       (setq bibtex-entry (bibtex-parse-entry))
;;       ;; downcase field names so they work in the format-citation code
;;       (dolist (cons-cell bibtex-entry)
;;         (setf (car cons-cell) (downcase (car cons-cell))))
;;       (setq entry-type (downcase (cdr (assoc "=type=" bibtex-entry))))
;;       (setq format (cdr (assoc entry-type org-ref-bibliography-entry-format)))
;;       (if format
;;           (setq entry  (org-ref-reftex-format-citation bibtex-entry format))
;;         ;; if no format, we use the bibtex entry itself as a fallback
;;         (save-restriction
;;           (bibtex-narrow-to-entry)
;;           (setq entry (buffer-string)))))

;; (org-ref-get-bibtex-entry "elb05")
;;
;; (setq key "elb05")
;; (setq results (org-ref-get-bibtex-key-and-file key))
;; (setq bibfile (cdr results))

;; --- other stuff (testing) -----
;; (setq file-page-offset (string-to-number (klin-bibtex-get-field "file-page-offset" nil "elb05")))
;; (setq pdf-filepath (klin-bibtex-get-field "filepath" "elb05"))
;; great, this works

;; (defun open-bibtex-pdf-at-point (cite-str)
;;   (setq strparts (split-string cite-str ":"))
;;   (setq key (nth 1 strparts))
;;   (setq page (string-to-number (nth 2 strparts)))
;;   (setq file-page-offset (string-to-number (klin-bibtex-get-field "file-page-offset" key)))
;;   (setq pdf-filepath (klin-bibtex-get-field "filepath" key))
;;   (progn
;;     (find-file-other-frame pdf-filepath)
;;     (pdf-view-goto-page (- (+ page file-page-offset) 1))))

;; (open-bibtex-pdf-at-point "cite:elb05:30")

;; (defun read-point-string-and-trigger-opening ()
;;   (setq cite-str (concat "cite:" (org-ref-get-bibtex-key-under-cursor)))
;;   (open-bibtex-pdf-at-point cite-str))

;; (define-key org-mode-map (kbd "C-c o") 'read-point-string-and-trigger-opening)

;; --- even more stuff (testing) ----
;; (progn
;;   (string-match "p\\.\\s-*\\([0-9]*\\)" description)
;;   (setq page-str (match-string 1 description))
;;   (open-bibtex-document-on-page bibtexkey (string-to-number page-str)))


;; (defun write-desktop-file ()
;;   (if (make-directory (concat projectile-project-root "emacs-desktop") 'parents)
;;       (desktop-save desktop-dirname)
;;   )

;; (defun open-pdf-in-new-frame-if-not-already-open ()
;;   ;; useful functions
;;   ;; (find-file-existing (setq filename (expand-file-name "~/Dropbox/2TextBooks/1-Bible/elberfelder-1905-deuelo_a4.pdf")))
;;   ;; (iconify-frame (nth 0 (frame-list)))
;;   ;; (buffer-list)
;;   ;; (visible-frame-list)
;;
;;   (setq buffer (get-buffer "elberfelder-1905-deuelo_a4.pdf"))
;;   (setq buffer-window (get-buffer-window buffer 0))
;;
;;   (if buffer
;;       (if buffer-window
;;           (progn
;;             (setq framewithpdf (window-frame buffer-window))
;;             (if (frame-visible-p framewithpdf)
;;                 (raise-frame framewithpdf))
;;             (make-frame-visible framewithpdf)
;;             (raise-frame framewithpdf))
;;         (switch-to-buffer-other-frame))
;;     (find-file-other-frame (setq filename (expand-file-name "~/Dropbox/2TextBooks/1-Bible/elberfelder-1905-deuelo_a4.pdf"))))
;;   )

;; TODO: because un-iconify for some reason doesn't work
;; in gnome through and Emacs 25, 26 (at least through raise-frame)
;; i do it only with visible and invisible frames, (which btw. don't show up in
;; gnome's window switcher.)
#+END_SRC
