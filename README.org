* Klin - integration of tools for notetaking and academic writing
This emacs-lisp library aims at creating a workflow to efficiently /link together all digital and hand-written notes one may have on a topic/ (for me, those are /university classes/). At the same time, in integrates tools to make all linked notes /editable/, even scanned-in handwritten notes (using open-source freehand drawing tools).

** What software is used?
/Klin/ integrates the following software (all free, mostly open source): 
- Linux (the developer uses [[https://ubuntu.com/][Ubuntu]]; Mac should also be possible, since it has a unix shell and the software unix-shell commands for many things, e.g. interaction between emcas and other programs; Windows: most tools used here are cross-platform, but windows doesn't come with a unix shell, which limits functionality)
- [[https://www.gnu.org/software/emacs/][Emacs]] (one of the most powerful and most expandable/scriptable text editors (comparable to an operating system) there is (as of 2019))
  - [[https://orgmode.org/][Org mode]] (one of the most powerful and most expandable digital notetaking/GTD systems, based on plain text; this README document was created using org-mode)
  - [[https://github.com/politza/pdf-tools][pdf-tools]] (emacs' way of viewing/searching/annotating PDFs; pixel-wise continuous scrolling is sadly not supported (as of 2019))
  - [[https://github.com/jkitchin/org-ref][org-ref]] (management of references for org-mode; several functions implemented in org-ref are used/built upon to manage bibliography/references)
  - [[https://github.com/weirdNox/org-noter][org-noter]] (package for note-taking by interleaving pdfs with side-by-side viewing of pdf and org-mode notes; basic functionality is taken and modified/expanded upon to interleave different sections of different pdfs in different org-mode headlines and continuously scroll through them, always creating new org-noter sessions, but keeping the cursor in the notes buffer and keeping the notes buffer widened (not narrowed)).
  - [[https://github.com/abo-abo/hydra][Hydra]] (key (!) package for quick summary of and access to useful functions in various contexts of the software; several conditional hydras are implemented in different contexts, all using lisp's /code as data/ capabilities)
  - [[https://github.com/knu/elscreen][ElScreen]] (for tabbed viewing/switching between several pdfs, trying to make pdf viewing more browser-like)
- [[https://github.com/xournalpp/xournalpp][Xournalpp]] (software to annotate pdfs, keeping the original pdf and the annotated one seperate; includes freehand annotation functionality)
- [[https://de.wikipedia.org/wiki/Portable_Document_Format][PDF]] (the files that you want to freehand-annotate are assumed to be pdfs)

Altough it can already do a lot of things, it is currently under construction.

** Recently implemented features/TODO's: 
- quick scanning of handwritten notes and insertion of links into org file:
  - [X] automatically insert scanned-in pdf as a link into org-mode as it arrives in a cloud folder (e.g.: scan pages using a smartphone's camera and dropbox's pdf scanning functionality)
  - [X] in an org-mode buffer, make a function that continuously watches and inserts pdf files arriving in the scanner dump folder (folder fed by actual hardware scanner, over the cloud) and inserts links to these pdfs 
  - [X] collate two scanned pdfs into one: implement a merge function that takes two selected files (within the selected region of the org-mode buffer) and merges (collates pages) them into an output file that is put in the same directory and is linked to by another org-mode link inserted afterwards.
  - [X] implement function that is run on an org-mode link (scanned pdf) and inserts an org-noter headline referring to that link into the org buffer, at the current position.
- [ ] implement /pop-off/ function for org-noter, where a new frame is opened up containing the same frame configuration as the old org-noter frame, but showing the original (base) buffers (pdf window not dedicated, independend searching/scrolling of the pdf and the document windows, but still the ability remains to go back to the old org-noter session instantly, if you launch org-noter from inside the document buffer)
- [ ] implement function that gathers all org-noter frames, makes them all the same size and puts them one above the other

*** Low-priority TODOs:
- make your custom org link to more seamlessly integrate with org-mode of cross-linking to referenced pdfs- make a graphical pdf editing tool in emacs using pdf-view-mode.

*** Things that would be nice but hard/annoying to fix: 
**** A browser extension generating accurate (*with-page-number*-) org-mode links to pdfs that are currently viewed in a web browser
Why this isn't implemented yet:
- in firefox, you /can't/ copy a string to your clipboard, but you /can/ acquire the string with the page using PDF.js
- in chrome, you /can/ copy a string to your clipboard, but you /can't/ acquire the string with the page:
  - chrome's native pdf viewer doesn't give you javascript access to the currently viewed page
  - using the PDF.js /PDF Viewer/ plugin this is interactively possible, but only through the javascript console (as of 26/11/2019). Since the PDF.js /PDF Viewer/ plugin supporting PDF.js exposes urls like ~chrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///path/to/example.pdf~, one is unable to run javascript on that page, since (actually luckily), it is impossible (for security reasons) to run javascript code on urls starting with ~chrome-extension://~.
    So, until PDF.js is natively integrated into chrome (which I don't think will happen), or Firefox will allow at some point easily allow putting a string into the clipboard using Javascript (which I don't think will happen any time soon), or chrome's native pdf viewer exposes a function to get to the current page, the browser-based generation of accurate links (with page number) can not be implemented easily.

** TODO's 
*** TODO cite link export to latex needs to be fixed
Under GNU Emacs 26.3 (build 2, x86_64-pc-linux-gnu, GTK+ Version 3.22.30) of 2019-09-16 and org mode version 9.2.6, links of the form ~[[cite:myBibtexKey][Description]]~ are getting exported as ~\href{myBibtexKey}{Description}~ and not /any more/ as ~\cite[Description]{myBibtexKey}~. Therefore, they do not appear in the references once ~\printbibliography~ is called. 
This would need to be fixed, by e.g. writing a latex export function for this link type and integrating that into org mode. 


** Where does the name come from?
"klin" is a one-step rotation of the word "link"

** Idiosyncracies

*** Line wrapping in org-noter
If an org-noter annotated headline is nested inside another headline, horizontal scrolling is activated when narrowing. With horizontal scrolling, emacs generally truncates lines.
Solutions (so far): 
- Make it a practice to make org-noter headlines not nested.
- Or be content with line truncation (doesn't matter e.g. in latex output).

*** Latex fragments preview in cloned buffers
If the base buffer has it's latex fragments rendered, a clone generally hasn't. Once it's cloned, the text is the same, but not the overlay display of latex fragments. Re-rendering these in a cloned buffer (e.g. a narrowed org-noter headline) is a task that has to be done manually. It is not automatically done, since in org-noter notes buffers, idle timers are run. The automatic rendering of latex preview fragments can interfere with the functions run in those idle timers and produce errors. To prevent this, latex fragments in clones aren't rendered automatically after clone creation.
