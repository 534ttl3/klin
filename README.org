* Klin - integration of tools for notetaking and academic writing
This emacs-lisp library aims at creating a workflow to efficiently /link together all digital and hand-written notes one may have on a topic/ (for me, those are /university classes/). At the same time, in integrates tools to make all linked notes /editable/, even scanned-in handwritten notes (using open-source freehand drawing tools).

** What software is used?
/Klin/ integrates the following software (all free, mostly open source): 
- Linux (the developer uses [[https://ubuntu.com/][Ubuntu]]; Mac should also be possible, since it has a unix shell and the software unix-shell commands for many things, e.g. interaction between emcas and other programs; Windows: most tools used here are cross-platform, but windows doesn't come with a unix shell, which limits functionality)
- [[https://www.gnu.org/software/emacs/][Emacs]] (one of the most powerful and most expandable/scriptable text editors (comparable to an operating system) there is (as of 2019))
  - [[https://orgmode.org/][Org mode]] (one of the most powerful and most expandable digital notetaking/GTD systems, based on plain text; this README document was created using org-mode)
  - [[https://github.com/politza/pdf-tools][pdf-tools]] (emacs' way of viewing/searching/annotating PDFs; pixel-wise continuous scrolling is sadly not supported (as of 2019))
  - [[https://github.com/jkitchin/org-ref][org-ref]] (management of references for org-mode; several functions implemented in org-ref are used/built upon to manage bibliography/references)
  - [[https://github.com/weirdNox/org-noter][org-noter]] (package for note-taking by interleaving pdfs with side-by-side viewing of pdf and org-mode notes; basic functionality is taken and modified/expanded upon to interleave different sections of different pdfs in different org-mode headlines and continuously scroll through them, always creating new org-noter sessions, but keeping the cursor in the notes buffer and keeping the notes buffer widened (not narrowed)).
  - [[https://github.com/abo-abo/hydra][Hydra]] (key (!) package for quick summary of and access to useful functions in various contexts of the software; several conditional hydras are implemented in different contexts, all using lisp's /code as data/ capabilities)
  - [[https://github.com/knu/elscreen][ElScreen]] (for tabbed viewing/switching between several pdfs, trying to make pdf viewing more browser-like)
- [[https://github.com/xournalpp/xournalpp][Xournalpp]] (software to annotate pdfs, keeping the original pdf and the annotated one seperate; includes freehand annotation functionality)
- [[https://de.wikipedia.org/wiki/Portable_Document_Format][PDF]] (the files that you want to freehand-annotate are assumed to be pdfs)

Altough it can already do a lot of things, it is currently under construction.

** Recently implemented features/TODO's: 
- quick scanning of handwritten notes and insertion of links into org file:
  - [X] automatically insert scanned-in pdf as a link into org-mode as it arrives in a cloud folder (e.g.: scan pages using a smartphone's camera and dropbox's pdf scanning functionality)
  - [X] in an org-mode buffer, make a function that continuously watches and inserts pdf files arriving in the scanner dump folder (folder fed by actual hardware scanner, over the cloud) and inserts links to these pdfs 
  - [X] collate two scanned pdfs into one: implement a merge function that takes two selected files (within the selected region of the org-mode buffer) and merges (collates pages) them into an output file that is put in the same directory and is linked to by another org-mode link inserted afterwards.
  - [ ] implement function that is run on an org-mode link (scanned pdf) and inserts an org-noter headline referring to that link into the org buffer, at the current position.
- [ ] implement /pop-off/ function for org-noter, where a new frame is opened up containing the same frame configuration as the old org-noter frame, but showing the original (base) buffers (pdf window not dedicated, independend searching/scrolling of the pdf and the document windows, but still the ability remains to go back to the old org-noter session instantly, if you launch org-noter from inside the document buffer)
- automatic latex preview rendering when entering an org file
  - [X] define a custom org property associated to the automatic rendering of latex previews in an org-mode document. Idiosyncracy: in some cases, automatic rendering after loading of the org-mode file produces errors, especially if there are other automatic tasks run beside that (e.g. using idle timers). Therefore, by default, automatic rendering is disabled.
- extend ~org-noter~, make it less rigid
  - [X] implement /pop-off/ function that creates a new frame /just above and with the same dimensions and scroll state/ as the window it was launched on and includes a clone of the buffer it was launched on.
  - [X] uncouple a side-by-side view (session) of org-noter document and org-noter notes (make windows un-dedicated and switch back to base buffers)
  - [X] jump from one org-noter session to another (with it's headline above or below the current one in base org document) in a widened org-mode buffer (to continuously scroll through the slides from my lectures and my handwritten additional ontes, which all are separate pdfs)
- PDF freehand annotation: make every pdf viewed in =pdf-view-mode= easily /freehand annotatable/, using the great tool xournalpp. This can be especially useful if you have a convertible laptop on which you can do both freehand drawing and use emacs at the same time.
  - [X] make a hydra from within =pdf-view-mode= that scans for/opens up an xournalpp freehand annotation file corresponding to the current pdf
  - [X] export pdf automatically in the background whenever freehand notes file is saved and revert it's buffer in emacs
  - [X] programmatically create a fresh xournalpp files with a custom background
- Rendering of notes to latex
  - [ ] introduce function that /processes/ the current (widened) org buffer to include some minimal headers for latex rendering (and checks for headers that are already included)
  - [X] introduce a function that colors TODO and DONE headlines in latex output
- browsing bibliography of your notes
  - [X] open a selection of PDFs from reference.bib in new frame for quick interactive browsing (using helm source)
  - [X] watch "scanning" folder (cloud access) for quick scanning of snippets (pdfs, e.g. photographed from android's dropbox app) and immediate pdf link insertion into org-mode
  - [X] detaching of current window and attaching somewhere else (e.g. in another frame, replacing some other window) of windows (scanned-in scraps of scanned paper with timestamps as their name; I don't want to be typing their names (timestamps) in order to navigate to their buffers when rearranging layouts)
  - jump to references (and to specific pages therein) that have associated pdf files, using additional custom bibtex fields =filepath={[Filepath of associated pdf file]}= and =file-page-offset={[Page number where arabic numbering starts]}=
    - [X] associate a /collective/ bibtex file (contains references) to an org-mode file (contains notes)
    - [X] get all collective bibtex files (associated org files opened inside the current emacs context)
- transform bibliographies
  - creating bibtex files
    - [X] with only one entry, individually associated to every pdf (create a ~self.bib~ bibtex file)
    - [X] with multiple entries, associated to notes/articles (/collective/ ~references.bib~ file)
  - editing bibtex files
    - [X] insertion/browsing of all /self.bib/ files for quick insertion into a /collective/ bib file
    - [X] browsing of all /collective/ bib files (in the current context) for quick insertion of the current entry (e.g. within a just-created /self.bib/ file)
  - creating current bibtex entry
    - [X] pull it down from the internet based on
      - [X] ISBN (copied from the pdf)
      - [ ] doi
  - editing custom fields of current bibtex entry
      - [X] ~filepath~
      - [X] ~file-page-offset~
      - [X] create a hydra acting on the bibtex entry at point, giving access to functions that update it's fields

*** Other /nice-to-have/ or /long-term/ ideas:
- create function that makes interactive latex editing/viewing easy (all in org-mode buffer) by inserting a cursor into the rendered latex equation and having a hotkey toggle between source and rendered representation (might be revolutionary, but will require some time to implement)
- make elscreen create new buffers to fill in the gap after killing an elscreen buffer with a number in between minimum and maximum

*** Low-priority TODOs:
- make your custom org link to more seamlessly integrate with org-mode of cross-linking to referenced pdfs- make a graphical pdf editing tool in emacs using pdf-view-mode.

** Where does the name come from?
~"klin"=rotate("link", 1)~

** Idiosyncracies
*** Line wrapping in org-noter
If an org-noter annotated headline is nested inside another headline, horizontal scrolling is activated when narrowing. With horizontal scrolling, emacs generally truncates lines.
Solutions (so far): 
- Make it a practice to make org-noter headlines not nested.
- Or be content with line truncation (doesn't matter e.g. in latex output).
*** Latex fragments preview in cloned buffers
If the base buffer has it's latex fragments rendered, a clone generally hasn't. Once it's cloned, the text is the same, but not the overlay display of latex fragments. Re-rendering these in a cloned buffer (e.g. a narrowed org-noter headline) is a task that has to be done manually. It is not automatically done, since in org-noter notes buffers, idle timers are run. The automatic rendering of latex preview fragments can interfere with the functions run in those idle timers and produce errors. To prevent this, latex fragments in clones aren't rendered automatically after clone creation.
