* ~klin~ - integration of notetaking tools in emacs
** What is this library?
This emacs-lisp library aims at creating a workflow to efficiently /link together all digital and hand-written notes one may have on a topic/ (for me, those are largely university classes, but also personal research projects). At the same time, it integrates tools to make all linked notes /editable/, even scanned-in handwritten notes (using open-source freehand drawing tools).

*** Where does the name come from?
~klin~ is a one-step rotation of the word ~link~. It is supposed to /link/ information together,  reducing the amount of steps it takes to jump in-between personal notes (org-mode documents) and specific sections of PDF documents (e.g. referenced books and pages therein). As an alternative, one could of course always use a normal, browser-based wiki software to /link information together/. This would however not take advantage of the rich features of emacs and org-mode.

** What software is used?
~klin~ integrates the following software (among others; all free; mostly open source): 
- Linux (the owner of this library uses [[https://ubuntu.com/][ubuntu]]; Mac: most functionality should run there too, since it has a unix shell; this library uses unix-shell commands for many things, e.g. interaction between emacs and other programs. Windows: most tools used by this library are cross-platform, but windows does not come with a unix shell, which limits functionality)
- [[https://www.gnu.org/software/emacs/][Emacs]] (one of the most powerful and most expandable/scriptable text editors (comparable to an operating system) there is (as of 2019))
  - [[https://orgmode.org/][Org mode]] (one of the most powerful and most expandable digital notetaking/GTD systems, based on plain text; this README document was created using org-mode)
  - [[https://github.com/politza/pdf-tools][pdf-tools]] (emacs' way of viewing/searching/annotating PDFs; pixel-wise continuous scrolling is sadly not supported (as of 2019))
  - [[https://github.com/jkitchin/org-ref][org-ref]] (management of references for org-mode; several functions implemented in org-ref are used/built upon to manage bibliography/references)
  - [[https://github.com/weirdNox/org-noter][org-noter]] (package for note-taking by interleaving pdfs with side-by-side viewing of pdf and org-mode notes; basic functionality is taken and modified/expanded upon to interleave different sections of different pdfs in different org-mode headlines and continuously scroll through them, always creating new org-noter sessions, but keeping the cursor in the notes buffer and keeping the notes buffer widened (not narrowed)).
  - [[https://github.com/abo-abo/hydra][Hydra]] (key package for quick summary of and access to useful functions in various contexts of the software; several conditional hydras are implemented in different contexts, all using lisp's /code as data/ capabilities)
  - [[https://github.com/knu/elscreen][ElScreen]] (for tabbed viewing/switching between several pdfs, trying to make pdf viewing more browser-like)
- [[https://github.com/xournalpp/xournalpp][Xournalpp]] (software to annotate pdfs, keeping the original pdf and the annotated one seperate; includes freehand annotation functionality)
- [[https://de.wikipedia.org/wiki/Portable_Document_Format][PDF]] (the files that you want to freehand-annotate are assumed to be pdfs)
- [[https://github.com/mozilla/pdf.js][PDF.js]] as the standard PDF viewing library (with Javascript API) of the [[https://www.mozilla.org/de/firefox/new/][Mozilla Firefox]] web-browser

** Recently implemented features, TODO's:
- [ ] record a video showing off ~klin~'s capabilities
- [ ] write function that converts all ~pdfview~ links to ~cite~ links (for pdf books, not necessarily for handwritten PDF notes)
- [X] bookmarklet written to generate correctly formatted org-mode link to pdf with page from Firefox browser (PDF.js, Firefox' default PDF viewer)
- [X] custom org link export to latex for ~cite~ link type
- more optimizations for org-noter
  - [ ] implement /pop-off/ function for org-noter, where a new frame is opened up containing the same frame configuration as the old org-noter frame, but showing the original (base) buffers (pdf window not dedicated, independend searching/scrolling of the pdf and the document windows, but still the ability remains to go back to the old org-noter session instantly, if you launch org-noter from inside the document buffer)
  - [ ] implement function that gathers all org-noter frames, makes them all the same size and puts them one above the other
- quick scanning of handwritten notes and insertion of links into org file:
  - [X] automatically insert scanned-in pdf as a link into org-mode as it arrives in a cloud folder (e.g.: scan pages using a smartphone's camera and dropbox's pdf scanning functionality)
  - [X] in an org-mode buffer, make a function that continuously watches and inserts pdf files arriving in the scanner dump folder (folder fed by actual hardware scanner, over the cloud) and inserts links to these pdfs 
  - [X] collate two scanned pdfs into one: implement a merge function that takes two selected files (within the selected region of the org-mode buffer) and merges (collates pages) them into an output file that is put in the same directory and is linked to by another org-mode link inserted afterwards.
  - [X] implement function that is run on an org-mode link (scanned pdf) and inserts an org-noter headline referring to that link into the org buffer, at the current position.

** Idiosyncracies
*** org-noter
Integrating org-noter subheadings into an org file where you would want to also store other things except annotations is not advised, since the workflow is currently just a bit too messy (however, that might change in the future).
**** Line wrapping in org-noter
If an org-noter annotated headline is nested inside another headline, horizontal scrolling is activated when narrowing. With horizontal scrolling, emacs generally truncates lines.
There are two easy options, both of which are not satisfying:
- make it a practice to not nest org-noter headlines inside other headlines
- be content with line truncation
**** automatic rendering of latex fragments in org-noter notes buffers (clones)
If the base buffer has it's latex fragments rendered, a clone generally hasn't. Once it's cloned, the text is the same, but not the overlay display of latex fragments. Re-rendering these in a cloned buffer (e.g. a narrowed org-noter headline) is a task that has to be done manually. It is not automatically done, since in org-noter notes buffers, idle timers are run. The automatic rendering of latex preview fragments can interfere with the functions run in those idle timers and produce errors. To prevent this, latex fragments in clones aren't rendered automatically after clone creation.
